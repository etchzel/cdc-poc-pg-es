version: "3"

services:
  postgres:
    image: postgres:13
    env_file:
        - .env
    volumes:
        - "./postgres/data:/var/lib/postgresql/data:rw"
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
    command: [ "postgres", "-c", "wal_level=logical" ]
    ports:
        - "5432:5432"
    container_name: postgres

  pgadmin:
    image: dpage/pgadmin4
    env_file:
        - .env
    volumes:
        - "./data_pgadmin:/var/lib/pgadmin"
    ports:
        - "8081:80"

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    ports:
      - "9200:9200"
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.enabled=false

  zookeeper:
    image: quay.io/debezium/zookeeper:1.9
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    image: quay.io/debezium/kafka:1.9
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
     
  connect-jdbc:
    image: debezium/connect-jdbc:1.9
    build:
      context: .
      dockerfile: ./connect-jdbc/Dockerfile
    ports:
      - 8083:8083
      - 5005:5005
    links:
      - kafka
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses

  connect-es:
    image: debezium/connect-es:1.9
    build:
      context: .
      dockerfile: ./connect-es/Dockerfile
    ports:
      - 8084:8083
      - 5006:5005
    links:
      - kafka
      - elastic
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses
